/* This file is auto generated by C-Sugar @author Steven Dellamore 
URL = https://github.com/Dellamoresteven/C-Sugar */

// author: Steven Dellamore
// date: 2020-3-9
// version: 1.0.0


#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <cctype>
#include <list>
#include <sys/stat.h>
#include <unistd.h>
#include <functional>
#include <map>
#include <sstream>
#include <iterator>
#include <string>

#include "config.cpp"
#include <boost/algorithm/string.hpp>

using namespace std;
using namespace boost;

class token {
    private: 
    string curr;
    // vector<string> validTagList = { "#frontpage", "#class", "#code", "#function", "#method" };
    // vector<string> validTagListIsInner = { "#function" };
    // vector<string> validConfigList = { "@author", "@date", 
    //                                     "@version", "@company", 
    //                                     "@title", "@location",
    //                                     "@email", "@name", "@desc",
    //                                     "@code", "@param", "@return", "@header", 
    //                                     "@office", "@returns", "@language" };
    public:
    token() {}

    template <typename T >
string getVar( T &stream ) {
        string fullLine = "";
        string line;
        int numTabSpace = 0;
        const std::string& chars = "\t\v\f\r ";
        while ( getline( stream, line ) ) {
            auto found = line.find("|");
            auto foundComment = line.find("//");
            if( found != string::npos && foundComment != string::npos ){
                // cout << "fullLine:\n" << fullLine << endl;
                return fullLine;
            } else {
                if( fullLine == "" ) {
                    numTabSpace = line.find_first_not_of(chars);
                    line.erase(0, numTabSpace);
                    fullLine += line;
                } else {
                    int checkTabSpace = line.find_first_not_of(chars);
                    if( checkTabSpace >= numTabSpace ) {
                        line.erase(0, numTabSpace);
                    }
                    fullLine += "\n";
                    fullLine += line;
                }
            }
        }
        cout << "ERROR getVar\n";
        return "-1";
    }

    template <typename T >
string getNextComment( T &stream ) {
        string fullLine = "";
        string line;
        while (getline( stream, line )) {
            // found @TODO
            auto found = std::min(line.find("//"), line.find("*"));
            if (found != string::npos) {
                const std::string& chars = "\t\v\f\r ";
                line.erase(0, line.find_first_not_of(chars));
                if(line.at(0) == '/' && line.at(1) == '/'){
                    fullLine += line.substr(2);
                } else if( line.at(0) == '*' && line != "/" && line != "*/" ) {
                    fullLine += line.substr(1);
                } 
                // else {
                //     fullLine += line;
                // }
                // found @TODO
                auto found = line.find("#code");
                if (found != string::npos) {
                    string temp = getVar( stream );
                    // cout << "temp:\n" << temp << endl;
                    fullLine = "//" + fullLine + "\n" + temp;
                    return fullLine;
                }

                if(line.at(line.length() - 1) == '|' || line.at(line.length() - 2) == '|'){
                    fullLine = "//" + fullLine;
                    // cout << "fullLine: " << fullLine << endl << endl;
                    return fullLine;
                }
            }
        }
        return "-1";
    }

    auto link(  ) {
        auto linkerLambda = [&](auto whatToSearch, auto whatToSearch2){
            for( auto& methodElem : whatToSearch ) {
                int pos = methodElem->name.find_last_of(":");
                string tempMatch = methodElem->name.substr(0, pos-1);
                methodElem->name = methodElem->name.substr(pos+1);
                for( auto& funName : whatToSearch2 ) {
                    if( funName->name == tempMatch ){
                        funName->inner.push_back(methodElem);
                    }
                }
            }
        };
        linkerLambda(config::methods, config::functions);
        linkerLambda(config::functions, config::classes);
    }

    template <typename T, typename U >
auto parseLineWithComment( T line, U &file ) {
        // cout << "line:\n" << line << endl;
        if( line == "-1" ) return;

        stringstream lineReaderSS( line );
        string word;
        

        auto getSubstance = [&](auto &stream) mutable {
            string name; 
            while( stream >> word  ) {
                if(word == "|") {
                    return name.substr( 0, name.length() - 1 );
                }
                name += word;
                name += " ";
            }
            cout << "UH OHOHH" << endl;
            return name.substr( 0, name.length() - 1 ); 
        };

        while( lineReaderSS >> word ) {
            if( word == "#frontpage" ) {
                curr = "frontpage";
            } else if( word == "#class" ) {
                config::Classes * e = new config::Classes();
                lineReaderSS >> e->name;
                config::classes.push_back(e);
                curr = "class";
            } else if( word == "#code" ) {
                config::varsS * e = new config::varsS();
                lineReaderSS >> e->name;
                lineReaderSS >> e->language;
                e->code = "\n\\begin{minted}[fontsize=\\footnotesize]{" + e->language + "}\n" + line.substr(line.find("\n") + 1) + "\n\\end{minted}\n";
                config::vars.push_back( e );
            } else if( word == "#function" ) {
                config::Functions * e = new config::Functions();
                lineReaderSS >> e->name;
                config::functions.push_back(e);
                curr = "function";
            } else if( word == "#method" ) {
                config::Methods * e = new config::Methods();
                lineReaderSS >> e->name;
                config::methods.push_back(e);
                curr = "method";
            } else if( word.at(0) == '@' ) {
                vector< pair<string, string> > * currConfigMap;
                if( curr == "method" ) {
                    currConfigMap = &config::methods.at(config::methods.size()-1)->configMap;
                } else if( curr == "function" ) {
                    currConfigMap = &config::functions.at(config::functions.size()-1)->configMap;
                } else if( curr == "class" ) {
                    currConfigMap = &config::classes.at(config::classes.size()-1)->configMap;
                } else if( curr == "frontpage" ) {
                    currConfigMap = &config::frontPage->configMap;
                } else {
                    cout << "WHATTTT" << endl;
                    exit(1);
                }
                string temp = word;
                string value = getSubstance( lineReaderSS );
                currConfigMap->push_back(std::pair<string,string>( temp, value ));
            }
        }
    }
};