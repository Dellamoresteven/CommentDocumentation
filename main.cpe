@header

#inc e
#include <functional>

#include "config.cpp"
#include "createTex.cpp"

using namespace std;
using namespace config;
using namespace createtex;

def getNextComment( &stream ) {
    string line;
    while (getline( stream, line )) {
        var found = line.find("//");
        if (found != string::npos) { 
            return pair<string, int>(line, found);
        }
    }
    return pair<string, int>("-1", -1);
}

static string curr = "";

def parseLineWithComment( line ) {
    if( line.second == -1 ) return;

    istringstream lineReaderSS( line.first.substr( line.second ) );
    string word;

    auto getSubstance = [&](auto &stream) {
        string name; 
        while( word != "\\" && word != "\n" ) {
            stream >> word;
            name += word;
            name += " ";
        }
        return name.substr( 0, name.length() - 3 );
    };

    while( lineReaderSS >> word ) {
        if( word == "#frontpage" )
            curr = "#frontpage";
        if( word == "#class" )
            curr = "#class";
        if( curr != "" ) {
            if( word == "@author" ) 
                configMap[curr]["@author"] = getSubstance( lineReaderSS );
            if( word == "@date" ) 
                configMap[curr]["@date"] = getSubstance( lineReaderSS );
            if( word == "@version" ) 
                configMap[curr]["@version"] = getSubstance( lineReaderSS );
            if( word == "@company" ) 
                configMap[curr]["@company"] = getSubstance( lineReaderSS );
            if( word == "@title" )
                configMap[curr]["@title"] = getSubstance( lineReaderSS ); 
            if( word == "@location" ) 
                configMap[curr]["@location"] = getSubstance( lineReaderSS );
            if( word == "@email" ) 
                configMap[curr]["@email"] = getSubstance( lineReaderSS );
            if( word == "@name" ) 
                configMap[curr]["@name"] = getSubstance( lineReaderSS );
            if( word == "@desc" ) 
                configMap[curr]["@desc"] = getSubstance( lineReaderSS );
        }
    }
}

m {
    ifstream file( "input/text.cpp" );
    pair<string,int> found;
    while( found.second != -1 ) {
        found = getNextComment( file );
        parseLineWithComment( found ); 
    }
    printConfigMap();
    frontpage( configMap.find("#frontpage")->second );
    return 0;
}