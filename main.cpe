@header

#inc e
#include <functional>
#include <iomanip>
#include "boost/program_options.hpp" 
using namespace boost::program_options;

#include "config.cpp"
#include "createTex.cpp"
#include "token.cpp"

using namespace std;
using namespace config;
// using namespace createtex;

#define cyan "\u001b[36m"
#define magenta "\u001b[35m"
#define yellow "\u001b[33m"
#define green "\u001b[32m"
#define red "\u001b[31m"
#define normal "\033[0m"

m {
    /* for later */
    // string outfile = "output.tex";
    // try { 
    //     options_description desc("Options"); 
    //     desc.add_options() 
    //         ("help,h", "Print help messages") 
    //         ("output,o", value(&outfile), "output File Name");
        
    //     variables_map vm; 
    //     try {
    //         store(parse_command_line(argc, argv, desc), vm);
    //         if ( vm.count("help")  ) { 
    //             std::cout << "You should know" << endl;
    //             return 1; 
    //         }
    //         notify(vm);
    //     } catch(error& e) { 
    //         std::cerr << "ERROR: " << e.what() << std::endl << std::endl; 
    //         return -1; 
    //     }
        
        token * tok = new token();
        texWriter * textwriter = new texWriter();
        ifstream commentMakeFile( "CommentMake.txt" );
        string fileName;
        while ( getline( commentMakeFile, fileName ) ) {
            ifstream file( fileName );
            string found;
            while( found != "-1" ) {
                found = tok->getNextComment( file );
                tok->parseLineWithComment( found, file ); 
            }
        }
        tok->link();
        textwriter->startDoc();

        cout << "FRONTPAGE:\n";
        for( auto elem : config::frontPage->configMap ) {
            cout << green << elem.first << ":" << elem.second << endl << normal;
        }
        cout << "\nCLASSES\n";
        for( auto elem : config::classes ) {
            for( auto elemMap : elem->configMap ) {
                cout << red << elemMap.first << ":" << elemMap.second << endl << normal;
            }
            for( auto elemInner : elem->inner ) {
                cout << green << elemInner->name << endl << normal;
            }
            cout << endl;
        }

        cout << "\nFUNCTIONS\n";
        for( auto elem : config::functions ) {
            cout << "Name: " << elem->name << endl;
            for( auto elemMap : elem->configMap ) {
                cout << yellow << elemMap.first << ":" << elemMap.second << endl << normal;
            }
            for( auto elemInner : elem->inner ) {
                cout << green << elemInner->name << endl << normal;
            }
            cout << endl;
        }

        cout << "\nMETHODS\n";
        for( auto elem : config::methods ) {
            for( auto elemMap : elem->configMap ) {
                cout << magenta << elemMap.first << ":" << elemMap.second << endl << normal;
            }
            cout << endl;
        }

        cout << "\nVARS\n";
        for( auto elem : config::vars ) {
            cout << cyan << "Name:" << elem->name << "Code: " << elem->code << "Lan:" << elem->language << endl << normal;
        }

    // } catch(std::exception& e) {
    //     cout << "EERROROR: " << e.what();
    //     return -1;
    // }
}
