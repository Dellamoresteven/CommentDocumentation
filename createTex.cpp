/* This file is auto generated by C-Sugar @author Steven Dellamore 
URL = https://github.com/Dellamoresteven/C-Sugar */

// author: Steven Dellamore
// date: 2020-2-28
// version: 1.0.0


#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <cctype>
#include <list>
#include <sys/stat.h>
#include <unistd.h>
#include <functional>
#include <map>
#include <sstream>
#include <iterator>
#include <string>
#include <unordered_map>

using namespace std;

namespace createtex {

    static void replace( string& contents, string replace, string replaceWith ) {
        {} // fix the weird syntex highlighting
        auto pos = contents.find(replace);
        while (pos != string::npos) {
            contents.replace(pos, replace.length(), replaceWith);
            pos = contents.find(replace, pos);
        }
    }

    static void startDoc() {
        ifstream stream( "templates/startDoc.txt" );
        string contents;
        for (char ch; stream.get(ch); contents.push_back(ch)) {}
        ofstream out("./output/output.tex", std::ios_base::app);
        out << contents;
        out.close();
    }

    static void endDoc() {
        ifstream stream( "templates/endDoc.txt" );
        string contents;
        for (char ch; stream.get(ch); contents.push_back(ch)) {}
        ofstream out("./output/output.tex", std::ios_base::app);
        out << contents;
        out.close();
    }

    static void frontpage( unordered_map<string, string> map ) {
        // vecReplace @TODO
        auto vecReplace = std::vector< string >();
        // vecFind @TODO
        auto vecFind = std::vector< string >();
        vecReplace.push_back( "DATE"); // pushing  "DATE" onto vecReplace
        vecReplace.push_back("AUTHOR"); // pushing "AUTHOR" onto vecReplace
        vecReplace.push_back("COMPANY"); // pushing "COMPANY" onto vecReplace
        vecReplace.push_back("TITLE"); // pushing "TITLE" onto vecReplace
        vecReplace.push_back("LOCATION"); // pushing "LOCATION" onto vecReplace
        vecReplace.push_back("NAME"); // pushing "NAME" onto vecReplace
        vecReplace.push_back("EMAIL"); // pushing "EMAIL" onto vecReplace
        vecReplace.push_back("COMPANY"); // pushing "COMPANY" onto vecReplace
        vecReplace.push_back("VERSION"); // pushing "VERSION" onto vecReplace
        vecFind.push_back( "@date"); // pushing  "@date" onto vecFind
        vecFind.push_back("@author"); // pushing "@author" onto vecFind
        vecFind.push_back("@company"); // pushing "@company" onto vecFind
        vecFind.push_back("@title"); // pushing "@title" onto vecFind
        vecFind.push_back("@location"); // pushing "@location" onto vecFind
        vecFind.push_back("@name"); // pushing "@name" onto vecFind
        vecFind.push_back("@email"); // pushing "@email" onto vecFind
        vecFind.push_back("@company"); // pushing "@company" onto vecFind
        vecFind.push_back("@version"); // pushing "@version" onto vecFind

        ifstream stream( "templates/frontPage.txt" );
        string contents;

        for (char ch; stream.get(ch); contents.push_back(ch)) {}

        for( int i = 0; i < vecFind.size(); i++ ) {
            replace( contents, vecReplace.at(i), map[vecFind.at(i)] );
        }

        ofstream out("./output/output.tex", std::ios_base::app);
        out << contents;
        out.close();
    }
}