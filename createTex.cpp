/* This file is auto generated by C-Sugar @author Steven Dellamore 
URL = https://github.com/Dellamoresteven/C-Sugar */

// author: Steven Dellamore
// date: 2020-2-29
// version: 1.0.0


#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <algorithm>
#include <vector>
#include <string>
#include <cctype>
#include <list>
#include <sys/stat.h>
#include <unistd.h>
#include <functional>
#include <map>
#include <sstream>
#include <iterator>
#include <string>
#include <unordered_map>
#include <boost/bind.hpp>

using namespace std;

namespace createtex {

    // static def void replace( string& contents, string replace, string replaceWith ) {
    //     {} // fix the weird syntex highlighting
    //     auto pos = contents.find(replace);
    //     while (pos != string::npos) {
    //         contents.replace(pos, replace.length(), replaceWith);
    //         pos = contents.find(replace, pos);
    //     }
    // }
// 
    // static void startDoc() {
    //     ifstream stream( "templates/startDoc.txt" );
    //     string contents;
    //     for (char ch; stream.get(ch); contents.push_back(ch)) {}
    //     ofstream out("./output/output.tex");
    //     out << contents;
    //     out.close();
    // }

    // static void endDoc() {
    //     ifstream stream( "templates/endDoc.txt" );
    //     string contents;
    //     for (char ch; stream.get(ch); contents.push_back(ch)) {}
    //     ofstream out("./output/output.tex", std::ios_base::app);
    //     out << contents;
    //     out.close();
    // }

    // static void frontpage( unordered_map<string, string> map ) {
    //     var vecReplace = vector string;
    //     var vecFind = vector string;
    //     vecReplace.pushv( "DATE", "AUTHOR", "COMPANY", "TITLE", "LOCATION", "NAME", "EMAIL", "COMPANY", "VERSION" );
    //     vecFind.pushv( "@date", "@author", "@company", "@title", "@location", "@name", "@email", "@company", "@version" );

    //     ifstream stream( "templates/frontPage.txt" );
    //     string contents;

    //     for (char ch; stream.get(ch); contents.push_back(ch)) {}

    //     for( int i = 0; i < vecFind.size(); i++ ) {
    //         replace( contents, vecReplace.at(i), map[vecFind.at(i)] );
    //     }
    //     // std::transform(vecReplace.begin(), 
    //     //                vecReplace.end(), 
    //     //                vecFind.begin(), 
    //     //                vecFind.end(), 
    //     //                boost::bind(
    //     //                         &replace, 
    //     //                         contents, 
    //     //                         std::placeholders::_1, 
    //     //                         std::placeholders::_2
    //     //                         )
    //     //                 );

    //     ofstream out("./output/output.tex", std::ios_base::app);
    //     out << contents;
    //     out.close();
    // }
}